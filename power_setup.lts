const PLUGGED_OUT = 0
const PLUGGED_IN = 1
range PLUGGED = PLUGGED_OUT..PLUGGED_IN

const BATTERY_OFF = 0
const BATTERY_ON = 1
range BATTERY_SWITCH = BATTERY_OFF..BATTERY_ON

const BATTERY_OUT = 0
const BATTERY_OK = 1
range BATTERY_STATUS = BATTERY_OUT..BATTERY_OK

const POWER_UNAVAILABLE = 0
const POWER_READY = 1
range POWER = POWER_UNAVAILABLE..POWER_READY

const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set
range ParamsStateT = ParamsNotSet .. ParamsSet

const FALSE = 0
const TRUE = 1
range TRUE_FALSE = FALSE..TRUE

const AlarmMax = 1
range AlarmAmount  = 0..AlarmMax

const LineMax = 1
range LineAmount = 0..LineMax

AC_POWER = AC[PLUGGED_OUT][POWER_UNAVAILABLE],
AC[plug: PLUGGED][ac_on: POWER] =
(
    when (plug == PLUGGED_OUT)
        plug_in -> AC[PLUGGED_IN][POWER_UNAVAILABLE]
    |
    when (plug == PLUGGED_IN && ac_on == POWER_UNAVAILABLE)
        switch_to_battery -> AC[plug][ac_on]
    |
    when (plug == PLUGGED_IN && ac_on == POWER_UNAVAILABLE)
        ac_power_on -> AC[plug][POWER_READY]
    |
    when (plug == PLUGGED_IN && ac_on == POWER_READY)
        ac_power_on -> AC[plug][ac_on]
    |
    when (plug == PLUGGED_IN && ac_on == POWER_READY)
        ac_power_out -> AC[plug][POWER_UNAVAILABLE]
    |
    when (plug == PLUGGED_IN)
        plug_out -> AC[PLUGGED_OUT][POWER_UNAVAILABLE]
).

BATTERY_SYSTEM = 
(
    plug_out -> BATTERY_SYSTEM
    |
    ac_power_on -> BATTERY_SYSTEM
    |
    switch_to_battery -> BS[BATTERY_OFF][BATTERY_OUT]
    |
    switch_to_battery -> BS[BATTERY_OFF][BATTERY_OK]
),

BS[battery_switch: BATTERY_SWITCH][battery_status: BATTERY_STATUS] = 
(
    // have battery --> keep working
    plug_out -> BS[battery_switch][battery_status]
    |// when the battery is working but the ac power works, it should turn to ac power
    ac_power_on -> BATTERY_SYSTEM
    |
    when (battery_switch == BATTERY_OFF)
        check_battery -> BS[BATTERY_ON][battery_status]
    |
    when (battery_switch == BATTERY_ON && battery_status == BATTERY_OUT)
        recharge -> BS[BATTERY_ON][BATTERY_OK]
    |
    when (battery_switch == BATTERY_ON && battery_status == BATTERY_OK)
        battery_on -> BS[battery_switch][battery_status]
    |
    when (battery_switch == BATTERY_ON && battery_status == BATTERY_OK)
        battery_out -> BS[battery_switch][BATTERY_OUT]
).
||POWER_SYSTEM = (AC_POWER || BATTERY_SYSTEM).

SETUP =
(
    plug_out -> SETUP
    |
    ac_power_out -> SETUP
    |
    battery_out -> SETUP
    |
    ac_power_on -> S[ParamsNotSet][ParamsNotSet]
    |
    battery_on -> S[ParamsNotSet][ParamsNotSet]
),
S[v_pressed: ParamsStateT][p_set: ParamsStateT] =
(
    plug_out -> S[v_pressed][p_set]
    |
    ac_power_out -> S[v_pressed][p_set] // battery may keep working
    |
    battery_out -> SETUP
    |
    ac_power_on -> S[v_pressed][p_set] // continue on from the previous step
    |
    battery_on -> S[v_pressed][p_set] // continue on from the previous step
    |
    infusion_done -> S[ParamsNotSet][ParamsNotSet]
    |
    when (v_pressed == ParamsNotSet && p_set == ParamsNotSet)
        set_rate -> S[ParamsSet][p_set]
    |
    when (v_pressed == ParamsSet && p_set == ParamsNotSet)
        press_cancel -> S[ParamsNotSet][ParamsNotSet]
    |
    when (v_pressed == ParamsSet && p_set == ParamsNotSet)
        press_set -> S[v_pressed][ParamsSet]
    |
    when (p_set == ParamsSet) // TODO can be cancelled again?
        confirm_settings -> S[ParamsSet][p_set]
).

LINE = 
(
    confirm_settings -> L[FALSE][FALSE][FALSE][FALSE]
),
L[pinched: TRUE_FALSE][plugged: TRUE_FALSE][empty: TRUE_FALSE][done: TRUE_FALSE] =
(
    when (pinched == TRUE || plugged == TRUE || empty == TRUE)
        flow_blocked -> L[pinched][plugged][empty][done]
    |
    when (pinched == TRUE || plugged == TRUE || empty == TRUE)
        alarm_lifted -> L[FALSE][FALSE][FALSE][done]
    |
    // when infusion is done, exceptions won't happen
    when (pinched == FALSE && done == FALSE)
        pinched -> L[TRUE][plugged][empty][done]
    |
    when (plugged == FALSE && done == FALSE)
        plugged -> L[pinched][TRUE][empty][done]
    |
    when (empty == FALSE && done == FALSE)
        empty_fluid -> L[pinched][plugged][TRUE][done]
    |
    when (pinched == FALSE && plugged == FALSE && empty == FALSE && done == FALSE)
        flow_liquid -> L[pinched][plugged][empty][FALSE]
    |
    when (pinched == FALSE && plugged == FALSE && empty == FALSE && done == FALSE)
        flow_liquid -> L[pinched][plugged][empty][TRUE]
    |
    when (pinched == FALSE && plugged == FALSE && empty == FALSE && done == TRUE)
        infusion_done -> LINE
).

ALARM =
(
    flow_blocked -> A[FALSE][FALSE]
),
A[silenced: TRUE_FALSE][unblocked: TRUE_FALSE] =
(
    when (silenced == FALSE && unblocked == FALSE)
        sound_alarm -> A[FALSE][unblocked]
    |
    when (silenced == FALSE && unblocked == FALSE)
        silent_alarm -> A[TRUE][unblocked]
    |
    when (unblocked == FALSE)
        flow_unblocked -> A[silenced][TRUE]
    |
    when (unblocked == TRUE)
        alarm_lifted -> ALARM
).

||PUMP = (POWER_SYSTEM || line[i:0..1]:SETUP || line[i:0..1]:LINE || line[i:0..1]:ALARM)
/{
    plug_out/line[plug_out:LineAmount].plug_out,
    ac_power_out/line[ac_power_out:LineAmount].ac_power_out,
    ac_power_on/line[ac_power_on:LineAmount].ac_power_on,
    battery_out/line[battery_out:LineAmount].battery_out,
    battery_on/line[battery_on:LineAmount].battery_on
}.