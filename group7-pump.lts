//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, set_volume, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

//only two lines
const LineMax = 1
range LineAmount = 0..LineMax

//=====================
// Process Definitions
//=====================

PUMP = POWER_SYSTEM,

POWER_SYSTEM = 
(
	plug_in ->(turn_on -> SELF_TEST| power_outage -> POWER_OUT)
),

SELF_TEST =
(
    success -> power_ready -> SELF_TEST
    |
    failure -> ALARM
),

// when the main power is not working, it has to switch to battery
POWER_OUT =
(
    switch_backup_supply -> check_battery_status ->
    (battery_ok -> power_ready -> POWER_OUT | battery_low -> ALARM)
),

//
// Pump in setup mode:
// - Once required pump parameters (just rate in this case) are set,
//   physical connections can be made and line can be locked
//
SETUP[params:ParamsStateT] =
(
	when (params == ParamsNotSet)
		set_rate -> enter_value -> set_volume -> enter_value ->
			(press_set -> SETUP[ParamsSet]
			|
			press_cancel -> SETUP[ParamsNotSet])
	|
	when (params == ParamsSet)
		clear_rate -> SETUP[ParamsNotSet]
		|
		confirm_settings -> LINE
	|
	power_outage -> ALARM
 ),


ALARM = 
(
	sound_alarm -> ALARM
).


INFUSION = (
	confirm_settings -> LINE
),
//lines can flow liquid, or be pinched and plugged.
LINE = LINE[0],
LINE[i:LineAmount] = (
	flow_liquid -> (
		skip -> LINE[i]
		|
		pinched -> LINE_ALARM[i]
		|
		plugged -> LINE_ALARM[i]
		|
		empty_fluid -> LINE_ALARM[i]
	)
	|
	done_infusion -> INFUSION //TODO consider the volume?
),

//when a line is pinched or plugged, alarm will alert.
//and the line won't flow liquid anymore until the 
//alarm is lifted.
LINE_ALARM[i:LineAmount] = (
	alarm -> alarm_lifted -> LINE[i]
)/{dispense_main_med_flow/flow_liquid}.
