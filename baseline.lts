const PLUGGED_IN = 0
const PLUGGED_OUT = 1
range PLUG = PLUGGED_IN..PLUGGED_OUT

const BATTERY_BAD = 0
const BATTERY_GOOD = 1
range BATTERY_STATE = BATTERY_BAD..BATTERY_GOOD

const ON = 0
const OFF = 1
range ON_OFF = ON..OFF

const RATE_SET = 0
const RATE_UNSET = 1
range RATES = RATE_SET..RATE_UNSET

const VALUE_ENTERED = 0
const VALUE_NOTENTERED = 1
range ENTERS = VALUE_ENTERED..VALUE_NOTENTERED

const SETTING_CONFIRMED = 0
const SETTING_UNCONFIRMED = 1
range CONFIRMS = SETTING_CONFIRMED..SETTING_UNCONFIRMED

const LINEMAX = 1
range LINEAMOUNT = 0..LINEMAX

const ALARMMAX = 1
range ALARMAMOUNT = 0..ALARMMAX


menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked
}

POWER_SYS = POWER_SYS[PLUGGED_IN][BATTERY_GOOD][OFF],
POWER_SYS[plug:PLUG][btry:BATTERY_STATE][state:ON_OFF] = (
    when(state == OFF && btry == BATTERY_GOOD)
        turn_on -> POWER_SYS[plug][btry][ON]
    |
    when(state == OFF && plug == PLUGGED_IN)
        turn_on -> POWER_SYS[plug][btry][ON]
    |
    when(plug == PLUGGED_OUT)
        plug_in -> POWER_SYS[PLUGGED_IN][btry][state]
    |
    when(state == ON && plug == PLUGGED_IN)
        unplug -> POWER_SYS[PLUGGED_OUT][btry][state]
    |
    when(state == ON && plug == PLUGGED_IN)//turn off the power
        turn_off -> power_off -> POWER_SYS[plug][btry][OFF]
    |
    when(state == ON && plug == PLUGGED_IN)//use ac power
        power_on -> POWER_SYS[plug][btry][state]
    |
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)//turn off the pump
        turn_off -> power_off -> POWER_SYS[plug][btry][OFF]
    |
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)//use battery
        power_on -> POWER_SYS[plug][btry][state]
    |
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)//battery is going to be used up
        battery_low -> POWER_SYS[plug][BATTERY_BAD][state]
    |
    when(state == ON && btry == BATTERY_BAD && plug == PLUGGED_OUT)//lose power
        power_off -> POWER_SYS[plug][btry][OFF]
).

LINE = (
    power_on -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
    |
    power_off -> LINE
),

SETUP[rate:RATES][enter:ENTERS][confirm_state:CONFIRMS] = (
    power_off -> LINE
    |
    when(rate == RATE_UNSET)
        set_rate -> SETUP[RATE_SET][enter][confirm_state]
    |
    when(rate == RATE_SET && enter == VALUE_NOTENTERED)
        enter_value -> SETUP[rate][VALUE_ENTERED][confirm_state]
    |
    when(rate == RATE_SET && enter == VALUE_ENTERED && confirm_state == SETTING_UNCONFIRMED)
        clear_rate -> SETUP[rate][VALUE_NOTENTERED][confirm_state]
    |
    when(rate == RATE_SET && enter == VALUE_ENTERED && confirm_state == SETTING_UNCONFIRMED)
        confirm_settings -> SETUP[rate][enter][SETTING_CONFIRMED]
    |
    when(rate == RATE_SET && enter == VALUE_ENTERED && confirm_state == SETTING_CONFIRMED)
        press_cancel -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
    |
    when(rate == RATE_SET && enter == VALUE_ENTERED && confirm_state == SETTING_CONFIRMED)
        press_set -> INFUSION
),

INFUSION = (
    power_off -> LINE
    |
    dispense_main_med_flow -> INFUSION
    |
    pinched -> LINE_ALARM
    |
    plugged -> LINE_ALARM
    |
    infusion_done -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
),

LINE_ALARM = (
    down -> up -> INFUSION
).

//Semaphore used to control the race condition of ALARM resource.
SEMAPHORE(I=0)     = SEMA[I],
SEMA[i:ALARMAMOUNT] = (when(i<ALARMMAX) up -> SEMA[i+1]
                      |when(i>0)        down->SEMA[i-1]
).

//The entire alarm system, currently I cannot let this
//system be interrupted by power failure, may be we can 
//fix this today
ALARM_SYS = (
	line[i:LINEAMOUNT].down -> SOUND_ALARM[i]
),

//The sub system of sound alarm.
SOUND_ALARM[i:ALARMAMOUNT] = (
     sound_alarm -> (
        solve_problem -> alarm_lifted -> line[i].up -> ALARM_SYS
        |
        skip -> SOUND_ALARM[i]
        |
        mute -> SLIENT_ALARM[i]
     )
),

//The sub system of slient alarm.
SLIENT_ALARM[i:ALARMAMOUNT] = (
     silence_alarm -> (
        solve_problem -> alarm_lifted -> line[i].up -> ALARM_SYS
        |
        skip -> SLIENT_ALARM[i]
        |
        unmute -> SOUND_ALARM[i]
     )
).

||PUMP = (POWER_SYS || line[0..1]:LINE || ALARM_SYS || line[0..1]::SEMAPHORE(1))/{
    power_on/line[0..1].power_on,
    power_off/line[0..1].power_off
}.