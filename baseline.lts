const PLUGGED_IN = 0
const PLUGGED_OUT = 1
range PLUG = PLUGGED_IN..PLUGGED_OUT

const BATTERY_ON = 0
const ACPOWER_ON = 1
const POWER_OFF = 2
range POWER_STATE = BATTERY_ON..POWER_OFF

const ON = 0
const OFF = 1
range ON_OFF = ON..OFF

const RATE_SET = 0
const RATE_NOTSET = 1
range RATE_SETTINGS = RATE_SET..RATE_NOTSET

const SETTING_CONFIRMED = 0
const SETTING_NOT_CONFIRMED = 1
range CONFIRM_STATE = SETTING_CONFIRMED..SETTING_NOT_CONFIRMED

const LINEMAX = 1
range LINEAMOUNT = 0..LINEMAX

const ALARMMAX = 1
range ALARMAMOUNT = 0..ALARMMAX

POWER_SYS = POWER_SYS[PLUGGED_IN][POWER_OFF][OFF],
POWER_SYS[plug:PLUG][power:POWER_STATE][state:ON_OFF] = (
    when(state == OFF)
        turn_on -> (
            when(plug == PLUGGED_OUT)
                check_battery -> (
                    battery_available -> POWER_SYS[plug][BATTERY_ON][ON]
                    |
                    battery_unavailable -> power_off -> POWER_SYS[plug][POWER_OFF][OFF]
                )
            |
            when(plug == PLUGGED_IN)
                ac_available -> power_on -> POWER_SYS[plug][ACPOWER_ON][ON]
        )
    |
    when(state == ON)
        turn_off -> power_off -> POWER_SYS[plug][POWER_OFF][OFF]
    |
    when(state == ON && power == BATTERY_ON)
        power_on -> POWER_SYS[plug][power][state]
    |
    when(state == ON && power == BATTERY_ON)
        plug_in -> POWER_SYS[PLUGGED_IN][ACPOWER_ON][state]
    |
    when(state == ON && power == BATTERY_ON)
        battery_useup -> POWER_SYS[plug][POWER_OFF][OFF]
    |
    when(state == ON && power == ACPOWER_ON)
        power_on -> POWER_SYS[plug][power][state]
    |
    when(state == ON && power == ACPOWER_ON)
        ac_power_failed -> check_battery -> (
            battery_available -> POWER_SYS[plug][BATTERY_ON][ON]
            |
            battery_unavailable -> power_off -> POWER_SYS[plug][POWER_OFF][OFF]
        )
).

LINE = (
    power_on -> SETUP[RATE_NOTSET][SETTING_NOT_CONFIRMED]
),

SETUP[rate:RATE_SETTINGS][state:CONFIRM_STATE] = (
    power_off -> LINE
    |
    when(rate == RATE_NOTSET && state == SETTING_NOT_CONFIRMED)
        set_rate -> SETUP[RATE_SET][state]
    |
    when(rate == RATE_SET && state == SETTING_NOT_CONFIRMED)
        cancel_settings -> SETUP[RATE_NOTSET][SETTING_NOT_CONFIRMED]
    |
    when(rate == RATE_SET && state == SETTING_NOT_CONFIRMED)
        confirm_settings -> INFUSION
),

INFUSION = (
    power_off -> LINE
    |
    flow_liquid -> INFUSION
    |
    pinched -> LINE_ALARM
    |
    plugged -> LINE_ALARM
    |
    infusion_done -> SETUP[RATE_NOTSET][SETTING_NOT_CONFIRMED]
),

LINE_ALARM = (
    down -> up -> INFUSION
).

//Semaphore used to control the race condition of ALARM resource.
SEMAPHORE(I=0)     = SEMA[I],
SEMA[i:ALARMAMOUNT] = (when(i<ALARMMAX) up -> SEMA[i+1]
                      |when(i>0)        down->SEMA[i-1]
).

//The entire alarm system, currently I cannot let this
//system be interrupted by power failure, may be we can 
//fix this today
ALARM_SYS = (
	line[i:LINEAMOUNT].down -> SOUND_ALARM[i]
),

//The sub system of sound alarm.
SOUND_ALARM[i:ALARMAMOUNT] = (
     sound_alarm -> (
        solve_problem -> alarm_lifted -> line[i].up -> ALARM_SYS
        |
        skip -> SOUND_ALARM[i]
        |
        mute -> SLIENT_ALARM[i]
     )
),

//The sub system of slient alarm.
SLIENT_ALARM[i:ALARMAMOUNT] = (
     slient_alarm -> (
        solve_problem -> alarm_lifted -> line[i].up -> ALARM_SYS
        |
        skip -> SLIENT_ALARM[i]
        |
        unmute -> SOUND_ALARM[i]
     )
).

||PUMP = (POWER_SYS || line[0..1]:LINE || ALARM_SYS || line[0..1]:SEMAPHORE(1))/{
    power_on/line[0..1].power_on,
    power_off/line[0..1].power_off
}.