//
// 17651 Pump
// Group 7 - Project 2 
// Li Zhang, Liwen Feng, Jhao-Ting Chen, Rishabh Panwar
//

//============================================
//           Constants and Ranges
//============================================

//state of the power line of a pump, 
//it can be either plugged in or unplugged
const PLUGGED_IN = 0
const PLUGGED_OUT = 1
range PLUG = PLUGGED_IN..PLUGGED_OUT

//state of the battery of a pump
//it can be either well-charged or empty
const BATTERY_BAD = 0
const BATTERY_GOOD = 1
range BATTERY_STATE = BATTERY_BAD..BATTERY_GOOD

//state of a pump
//it can be either on or off
const ON = 0
const OFF = 1
range ON_OFF = ON..OFF

//state of the rate of a pump
//it can be either set or unset
const RATE_SET = 0
const RATE_UNSET = 1
range RATES = RATE_SET..RATE_UNSET

//state of whether the rate value is enterred or not
const VALUE_ENTERED = 0
const VALUE_NOTENTERED = 1
range ENTERS = VALUE_ENTERED..VALUE_NOTENTERED

//state of whether the settings are confirmed or not
const SETTING_CONFIRMED = 0
const SETTING_UNCONFIRMED = 1
range CONFIRMS = SETTING_CONFIRMED..SETTING_UNCONFIRMED

//we just have two lines: line.0 and line.1
const LINEMAX = 1
range LINEAMOUNT = 0..LINEMAX

//we just have one alarm
const ALARMMAX = 1
range ALARMAMOUNT = 0..ALARMMAX

//the state is used to remember whether the 
//down action or up action has been executed or not
const SEMA_UP = 0
const SEMA_DOWN = 1
range SEMA_STATE = SEMA_UP..SEMA_DOWN

//the state of the solution for a problem which raised alarm
//solve -> alarm_lifted -> semaphore up
const SOLVE = 0
const LIFTED = 1
const MUTEXUP = 2
range SOLU_STATE = SOLVE..MUTEXUP

//Actions that can be operated by users.
menu UserControlMenu = {
    clear_values, confirm_settings, dispense_main_med_flow, enter_values, 
    sound_alarm, plug_in, unplug, press_cancel, press_set, set_values, 
    silence_alarm, turn_on, turn_off, mute, unmute, solve_problem, 
    alarm_lifted, plugged, pinched, infusion_done
}

//The whole power system. When the power failed, the whole
//system would shut down immediately, including alarm system
POWER_SYS = POWER_SYS[PLUGGED_IN][BATTERY_GOOD][OFF],
POWER_SYS[plug:PLUG][btry:BATTERY_STATE][state:ON_OFF] = (
    //battery is good, we can turn on the pump
    when(state == OFF && btry == BATTERY_GOOD) 
        turn_on -> POWER_SYS[plug][btry][ON]
    |
    //ac power is good, we can turn on the pump
    when(state == OFF && plug == PLUGGED_IN) 
        turn_on -> POWER_SYS[plug][btry][ON]
    |
    //plugging in the power line makes ac power be avaiable
    when(plug == PLUGGED_OUT) 
        plug_in -> POWER_SYS[PLUGGED_IN][btry][state]
    |
    //the power line will be unplugged
    when(state == ON && plug == PLUGGED_IN)
        unplug -> POWER_SYS[PLUGGED_OUT][btry][state]
    |
    //turn off the pump
    when(state == ON && plug == PLUGGED_IN)
        turn_off -> power_off -> POWER_SYS[plug][btry][OFF]
    |
    //use ac power
    when(state == ON && plug == PLUGGED_IN)
        power_on -> POWER_SYS[plug][btry][state]
    |
    //turn off the pump
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)
        turn_off -> power_off -> POWER_SYS[plug][btry][OFF]
    |
    //use battery
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)
        power_on -> POWER_SYS[plug][btry][state]
    |
    //battery is going to be used up
    when(state == ON && btry == BATTERY_GOOD && plug == PLUGGED_OUT)
        battery_low -> POWER_SYS[plug][BATTERY_BAD][state]
    |
    //lose power
    when(state == ON && btry == BATTERY_BAD && plug == PLUGGED_OUT)
        power_off -> POWER_SYS[plug][btry][OFF]
).

//Line System.
LINE = (
    //if power is on, we can setup settings for lines
    power_on -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
    |
    power_off -> LINE
),

//set settings for each individual line
SETUP[rate:RATES][enter:ENTERS][confirm_state:CONFIRMS] = (
    power_off -> LINE
    |
    //first we need to click "set values"
    when(rate == RATE_UNSET)
        set_values -> SETUP[RATE_SET][enter][confirm_state]
    |
    //then enter values
    when(rate == RATE_SET && enter == VALUE_NOTENTERED)
        enter_values -> SETUP[rate][VALUE_ENTERED][confirm_state]
    |
    //then we can clear the values
    when(rate == RATE_SET 
         && enter == VALUE_ENTERED 
         && confirm_state == SETTING_UNCONFIRMED)
        clear_values -> SETUP[rate][VALUE_NOTENTERED][confirm_state]
    |
    //or we can confirm the values
    when(rate == RATE_SET 
         && enter == VALUE_ENTERED 
         && confirm_state == SETTING_UNCONFIRMED)
        confirm_settings -> SETUP[rate][enter][SETTING_CONFIRMED]
    |
    //for the confirm user interface
    when(rate == RATE_SET 
         && enter == VALUE_ENTERED 
        && confirm_state == SETTING_CONFIRMED)

        //press cancel we can reset
        press_cancel -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
    |
    //for the confirm user interface
    when(rate == RATE_SET 
         && enter == VALUE_ENTERED 
         && confirm_state == SETTING_CONFIRMED)

        //pressing set means we can start pump
        press_set -> INFUSION_INIT
),

//infusion action
INFUSION_INIT = (
    power_off -> LINE
    |
    dispense_main_med_flow -> INFUSION//flow the liquid
),

INFUSION = (
    power_off -> LINE
    |
    // line is being pinched
    pinched -> LINE_ALARM[SEMA_UP] 
    |
    // line is being plugged
    plugged -> LINE_ALARM[SEMA_UP] 
    |
    //we finished the infusion, set up again
    infusion_done -> SETUP[RATE_UNSET][VALUE_NOTENTERED][SETTING_UNCONFIRMED]
),

//pinch or plug action will trigger line alarm action
//the down and up action were synchronized with the semaphore
//because they need to race to get the only one alarm resource
LINE_ALARM[sema:SEMA_STATE] = (
    power_off -> LINE
    |
    when(sema == SEMA_UP)
        down -> LINE_ALARM[SEMA_DOWN]
    |
    when(sema == SEMA_DOWN)
        up -> INFUSION
).

//Semaphore used to control the race condition of ALARM resource.
SEMAPHORE(I=0)     = SEMA[I],
SEMA[i:ALARMAMOUNT] = (
    power_off -> SEMA[ALARMMAX]
    |
    when(i<ALARMMAX) up -> SEMA[i+1]         
    |
    when(i>0)        down->SEMA[i-1]
).

//alarm system
ALARM_SYS = (
    power_off -> ALARM_SYS
    |
	line[i:LINEAMOUNT].down -> SOUND_ALARM[i]
),

//The sub system of sound alarm.
SOUND_ALARM[i:ALARMAMOUNT] = (
    power_off -> ALARM_SYS
    |
    sound_alarm -> SO_ALARM[i][SOLVE]
),

//when the alarm sounded, it can be muted,
// keep sounding, or the problem can be solved.
SO_ALARM[i:ALARMAMOUNT][solution_state:SOLU_STATE] = (
    power_off -> ALARM_SYS
    |
    when(solution_state == SOLVE)
        mute -> SLIENT_ALARM[i]
    |
    when(solution_state == SOLVE)
        skip -> SOUND_ALARM[i]
    |
    when(solution_state == SOLVE)
        solve_problem -> SO_ALARM[i][LIFTED]
    |
    when(solution_state == LIFTED)
        alarm_lifted -> SO_ALARM[i][MUTEXUP]
    |
    when(solution_state == MUTEXUP)
        line[i].up -> ALARM_SYS
),

//The sub system of slience alarm.
SLIENT_ALARM[i:ALARMAMOUNT] = (
    power_off -> ALARM_SYS
    |
    silence_alarm -> SL_ALARM[i][SOLVE]
),

//when the alarm sliently alarmed, it could be muted, 
//keep sounding, or the problem can be solved, 
SL_ALARM[i:ALARMAMOUNT][solution_state:SOLU_STATE] = (
    power_off -> ALARM_SYS
    |
    when(solution_state == SOLVE)
        unmute -> SOUND_ALARM[i]
    |
    when(solution_state == SOLVE)
        skip -> SLIENT_ALARM[i]
    |
    when(solution_state == SOLVE)
        solve_problem -> SL_ALARM[i][LIFTED]
    |
    when(solution_state == LIFTED)
        alarm_lifted -> SL_ALARM[i][MUTEXUP]
    |
    when(solution_state == MUTEXUP)
        line[i].up -> ALARM_SYS
).

//fluents and assertions to validate
fluent PUMPING_ERROR = <line[i: 0..1].dispense_main_med_flow, 
    {line[i: 0..1].pinched, line[i: 0..1].plugged}>
    
fluent INFUSE = <line[i: 0..1].done_infusion, 
    line[i: 0..1].dispense_main_med_flow>

fluent CONFIRM_SETTINGS = <confirm_settings, cancel_settings>
fluent POWER = <power_on, power_off>
fluent BATTERY = <unplug, battery_low>
fluent PUMPING = <power_off, dummy>
fluent ALARM_PROBLEM = <solve_problem, sound_alarm>
fluent PROBLEM_SOLVE = <line[i: 0..1].up,line[i: 0..1].down>
fluent ALARM = <sound_alarm, silence_alarm>


// assert 1: The pump cannot start pumping without the operator first 
// confirming the settings on the pump.
assert CONFIRM_THEN_PUMP = [](CONFIRM_SETTINGS -> <>PUMPING_ERROR) 

// assert 3:If the power system fails and the backup battery power both
// fails, pumping will not occur on any line. 
assert BATTERY_PUMPING = []( (!POWER && !BATTERY) -> <>PUMPING )

// assert 4: It is always possible to resume pumping after a failure.
assert RESUME_PUMPING_AFTER_FAIL = []((POWER || BATTERY) -> <>PUMPING_ERROR)

// assert 5: An alarm will sound on any line failure
assert ALARM_LINE = []( (!PUMPING) -> <>ALARM )

// assert 6: In the absence of errors, the pump will continue to pump 
// until the treatment is finished.
assert PUMP_UNTIL_TREATMENT_FINISHED = <>([]PUMPING_ERROR U INFUSE)

// assert 8: The condition causing the alarm will have to be 
// solved before the normal process continues.
assert ALARM_SOLVE = [](ALARM_PROBLEM -> <>PROBLEM_SOLVE)

//the pump, composed by line module, alarm module, 
// power system, and a semaphore.
||PUMP = (
    POWER_SYS || line[0..1]:LINE || ALARM_SYS || line[0..1]::SEMAPHORE(1)
)/{
    power_on/line[0..1].power_on,
    power_off/line[0..1].power_off
}.